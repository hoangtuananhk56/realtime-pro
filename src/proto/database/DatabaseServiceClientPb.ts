/**
 * @fileoverview gRPC-Web generated client stub for database
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/database/database.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_database_database_pb from '../../proto/database/database_pb'; // proto import: "proto/database/database.proto"


export class DatabaseServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorDropAndUnit = new grpcWeb.MethodDescriptor(
    '/database.DatabaseService/DropAndUnit',
    grpcWeb.MethodType.UNARY,
    proto_database_database_pb.DropAndUnitRequest,
    proto_database_database_pb.DropAndUnitResponse,
    (request: proto_database_database_pb.DropAndUnitRequest) => {
      return request.serializeBinary();
    },
    proto_database_database_pb.DropAndUnitResponse.deserializeBinary
  );

  dropAndUnit(
    request: proto_database_database_pb.DropAndUnitRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_database_database_pb.DropAndUnitResponse>;

  dropAndUnit(
    request: proto_database_database_pb.DropAndUnitRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.DropAndUnitResponse) => void): grpcWeb.ClientReadableStream<proto_database_database_pb.DropAndUnitResponse>;

  dropAndUnit(
    request: proto_database_database_pb.DropAndUnitRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.DropAndUnitResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/database.DatabaseService/DropAndUnit',
        request,
        metadata || {},
        this.methodDescriptorDropAndUnit,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/database.DatabaseService/DropAndUnit',
    request,
    metadata || {},
    this.methodDescriptorDropAndUnit);
  }

  methodDescriptorMigrate = new grpcWeb.MethodDescriptor(
    '/database.DatabaseService/Migrate',
    grpcWeb.MethodType.UNARY,
    proto_database_database_pb.MigrateRequest,
    proto_database_database_pb.MigrateResponse,
    (request: proto_database_database_pb.MigrateRequest) => {
      return request.serializeBinary();
    },
    proto_database_database_pb.MigrateResponse.deserializeBinary
  );

  migrate(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_database_database_pb.MigrateResponse>;

  migrate(
    request: proto_database_database_pb.MigrateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void): grpcWeb.ClientReadableStream<proto_database_database_pb.MigrateResponse>;

  migrate(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/database.DatabaseService/Migrate',
        request,
        metadata || {},
        this.methodDescriptorMigrate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/database.DatabaseService/Migrate',
    request,
    metadata || {},
    this.methodDescriptorMigrate);
  }

  methodDescriptorMigrateDetail = new grpcWeb.MethodDescriptor(
    '/database.DatabaseService/MigrateDetail',
    grpcWeb.MethodType.UNARY,
    proto_database_database_pb.MigrateRequest,
    proto_database_database_pb.MigrateResponse,
    (request: proto_database_database_pb.MigrateRequest) => {
      return request.serializeBinary();
    },
    proto_database_database_pb.MigrateResponse.deserializeBinary
  );

  migrateDetail(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_database_database_pb.MigrateResponse>;

  migrateDetail(
    request: proto_database_database_pb.MigrateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void): grpcWeb.ClientReadableStream<proto_database_database_pb.MigrateResponse>;

  migrateDetail(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/database.DatabaseService/MigrateDetail',
        request,
        metadata || {},
        this.methodDescriptorMigrateDetail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/database.DatabaseService/MigrateDetail',
    request,
    metadata || {},
    this.methodDescriptorMigrateDetail);
  }

  methodDescriptorInitDefenitionTable = new grpcWeb.MethodDescriptor(
    '/database.DatabaseService/InitDefenitionTable',
    grpcWeb.MethodType.UNARY,
    proto_database_database_pb.MigrateRequest,
    proto_database_database_pb.MigrateResponse,
    (request: proto_database_database_pb.MigrateRequest) => {
      return request.serializeBinary();
    },
    proto_database_database_pb.MigrateResponse.deserializeBinary
  );

  initDefenitionTable(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_database_database_pb.MigrateResponse>;

  initDefenitionTable(
    request: proto_database_database_pb.MigrateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void): grpcWeb.ClientReadableStream<proto_database_database_pb.MigrateResponse>;

  initDefenitionTable(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/database.DatabaseService/InitDefenitionTable',
        request,
        metadata || {},
        this.methodDescriptorInitDefenitionTable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/database.DatabaseService/InitDefenitionTable',
    request,
    metadata || {},
    this.methodDescriptorInitDefenitionTable);
  }

  methodDescriptorMigrateData = new grpcWeb.MethodDescriptor(
    '/database.DatabaseService/MigrateData',
    grpcWeb.MethodType.UNARY,
    proto_database_database_pb.MigrateDataRequest,
    proto_database_database_pb.MigrateResponse,
    (request: proto_database_database_pb.MigrateDataRequest) => {
      return request.serializeBinary();
    },
    proto_database_database_pb.MigrateResponse.deserializeBinary
  );

  migrateData(
    request: proto_database_database_pb.MigrateDataRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_database_database_pb.MigrateResponse>;

  migrateData(
    request: proto_database_database_pb.MigrateDataRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void): grpcWeb.ClientReadableStream<proto_database_database_pb.MigrateResponse>;

  migrateData(
    request: proto_database_database_pb.MigrateDataRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/database.DatabaseService/MigrateData',
        request,
        metadata || {},
        this.methodDescriptorMigrateData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/database.DatabaseService/MigrateData',
    request,
    metadata || {},
    this.methodDescriptorMigrateData);
  }

  methodDescriptorMigrateDataMongo = new grpcWeb.MethodDescriptor(
    '/database.DatabaseService/MigrateDataMongo',
    grpcWeb.MethodType.UNARY,
    proto_database_database_pb.MigrateRequest,
    proto_database_database_pb.MigrateResponse,
    (request: proto_database_database_pb.MigrateRequest) => {
      return request.serializeBinary();
    },
    proto_database_database_pb.MigrateResponse.deserializeBinary
  );

  migrateDataMongo(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_database_database_pb.MigrateResponse>;

  migrateDataMongo(
    request: proto_database_database_pb.MigrateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void): grpcWeb.ClientReadableStream<proto_database_database_pb.MigrateResponse>;

  migrateDataMongo(
    request: proto_database_database_pb.MigrateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_database_database_pb.MigrateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/database.DatabaseService/MigrateDataMongo',
        request,
        metadata || {},
        this.methodDescriptorMigrateDataMongo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/database.DatabaseService/MigrateDataMongo',
    request,
    metadata || {},
    this.methodDescriptorMigrateDataMongo);
  }

}

