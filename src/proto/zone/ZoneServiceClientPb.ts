/**
 * @fileoverview gRPC-Web generated client stub for zone
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/zone/zone.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_zone_zone_pb from '../../proto/zone/zone_pb'; // proto import: "proto/zone/zone.proto"


export class ZoneServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/zone.ZoneService/Create',
    grpcWeb.MethodType.UNARY,
    proto_zone_zone_pb.ZoneCreateRequest,
    proto_zone_zone_pb.ZoneResponse,
    (request: proto_zone_zone_pb.ZoneCreateRequest) => {
      return request.serializeBinary();
    },
    proto_zone_zone_pb.ZoneResponse.deserializeBinary
  );

  create(
    request: proto_zone_zone_pb.ZoneCreateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_zone_zone_pb.ZoneResponse>;

  create(
    request: proto_zone_zone_pb.ZoneCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.ZoneResponse) => void): grpcWeb.ClientReadableStream<proto_zone_zone_pb.ZoneResponse>;

  create(
    request: proto_zone_zone_pb.ZoneCreateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.ZoneResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zone.ZoneService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zone.ZoneService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorGetAll = new grpcWeb.MethodDescriptor(
    '/zone.ZoneService/GetAll',
    grpcWeb.MethodType.UNARY,
    proto_zone_zone_pb.GetAllRequest,
    proto_zone_zone_pb.GetAllResponse,
    (request: proto_zone_zone_pb.GetAllRequest) => {
      return request.serializeBinary();
    },
    proto_zone_zone_pb.GetAllResponse.deserializeBinary
  );

  getAll(
    request: proto_zone_zone_pb.GetAllRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_zone_zone_pb.GetAllResponse>;

  getAll(
    request: proto_zone_zone_pb.GetAllRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.GetAllResponse) => void): grpcWeb.ClientReadableStream<proto_zone_zone_pb.GetAllResponse>;

  getAll(
    request: proto_zone_zone_pb.GetAllRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.GetAllResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zone.ZoneService/GetAll',
        request,
        metadata || {},
        this.methodDescriptorGetAll,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zone.ZoneService/GetAll',
    request,
    metadata || {},
    this.methodDescriptorGetAll);
  }

  methodDescriptorGetByID = new grpcWeb.MethodDescriptor(
    '/zone.ZoneService/GetByID',
    grpcWeb.MethodType.UNARY,
    proto_zone_zone_pb.GetZoneByIdRequest,
    proto_zone_zone_pb.ZoneResponse,
    (request: proto_zone_zone_pb.GetZoneByIdRequest) => {
      return request.serializeBinary();
    },
    proto_zone_zone_pb.ZoneResponse.deserializeBinary
  );

  getByID(
    request: proto_zone_zone_pb.GetZoneByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_zone_zone_pb.ZoneResponse>;

  getByID(
    request: proto_zone_zone_pb.GetZoneByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.ZoneResponse) => void): grpcWeb.ClientReadableStream<proto_zone_zone_pb.ZoneResponse>;

  getByID(
    request: proto_zone_zone_pb.GetZoneByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.ZoneResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zone.ZoneService/GetByID',
        request,
        metadata || {},
        this.methodDescriptorGetByID,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zone.ZoneService/GetByID',
    request,
    metadata || {},
    this.methodDescriptorGetByID);
  }

  methodDescriptorCheckCanDeleteZoneById = new grpcWeb.MethodDescriptor(
    '/zone.ZoneService/CheckCanDeleteZoneById',
    grpcWeb.MethodType.UNARY,
    proto_zone_zone_pb.CheckCanDeleteZoneByIdRequest,
    proto_zone_zone_pb.CheckCanDeleteZoneByIdResponse,
    (request: proto_zone_zone_pb.CheckCanDeleteZoneByIdRequest) => {
      return request.serializeBinary();
    },
    proto_zone_zone_pb.CheckCanDeleteZoneByIdResponse.deserializeBinary
  );

  checkCanDeleteZoneById(
    request: proto_zone_zone_pb.CheckCanDeleteZoneByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_zone_zone_pb.CheckCanDeleteZoneByIdResponse>;

  checkCanDeleteZoneById(
    request: proto_zone_zone_pb.CheckCanDeleteZoneByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.CheckCanDeleteZoneByIdResponse) => void): grpcWeb.ClientReadableStream<proto_zone_zone_pb.CheckCanDeleteZoneByIdResponse>;

  checkCanDeleteZoneById(
    request: proto_zone_zone_pb.CheckCanDeleteZoneByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_zone_zone_pb.CheckCanDeleteZoneByIdResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/zone.ZoneService/CheckCanDeleteZoneById',
        request,
        metadata || {},
        this.methodDescriptorCheckCanDeleteZoneById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/zone.ZoneService/CheckCanDeleteZoneById',
    request,
    metadata || {},
    this.methodDescriptorCheckCanDeleteZoneById);
  }

}

