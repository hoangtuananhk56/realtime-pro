// source: proto/data-bridge/data_bridge.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.data_bridge.CreateImportHistoryRequest', null, global);
goog.exportSymbol('proto.data_bridge.CreateImportHistoryResponse', null, global);
goog.exportSymbol('proto.data_bridge.ImportRequest', null, global);
goog.exportSymbol('proto.data_bridge.ImportResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data_bridge.ImportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data_bridge.ImportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data_bridge.ImportRequest.displayName = 'proto.data_bridge.ImportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data_bridge.ImportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data_bridge.ImportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data_bridge.ImportResponse.displayName = 'proto.data_bridge.ImportResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data_bridge.CreateImportHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data_bridge.CreateImportHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data_bridge.CreateImportHistoryRequest.displayName = 'proto.data_bridge.CreateImportHistoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.data_bridge.CreateImportHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.data_bridge.CreateImportHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.data_bridge.CreateImportHistoryResponse.displayName = 'proto.data_bridge.CreateImportHistoryResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data_bridge.ImportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data_bridge.ImportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data_bridge.ImportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.ImportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    importHistoryId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data_bridge.ImportRequest}
 */
proto.data_bridge.ImportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data_bridge.ImportRequest;
  return proto.data_bridge.ImportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data_bridge.ImportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data_bridge.ImportRequest}
 */
proto.data_bridge.ImportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImportHistoryId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data_bridge.ImportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data_bridge.ImportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data_bridge.ImportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.ImportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImportHistoryId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string import_history_id = 1;
 * @return {string}
 */
proto.data_bridge.ImportRequest.prototype.getImportHistoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.ImportRequest} returns this
 */
proto.data_bridge.ImportRequest.prototype.setImportHistoryId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.data_bridge.ImportRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.ImportRequest} returns this
 */
proto.data_bridge.ImportRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes chunk = 3;
 * @return {string}
 */
proto.data_bridge.ImportRequest.prototype.getChunk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes chunk = 3;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.data_bridge.ImportRequest.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.data_bridge.ImportRequest.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.data_bridge.ImportRequest} returns this
 */
proto.data_bridge.ImportRequest.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data_bridge.ImportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data_bridge.ImportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data_bridge.ImportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.ImportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    errordata: msg.getErrordata_asB64(),
    flow: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data_bridge.ImportResponse}
 */
proto.data_bridge.ImportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data_bridge.ImportResponse;
  return proto.data_bridge.ImportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data_bridge.ImportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data_bridge.ImportResponse}
 */
proto.data_bridge.ImportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrordata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data_bridge.ImportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data_bridge.ImportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data_bridge.ImportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.ImportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getErrordata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFlow();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.data_bridge.ImportResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.ImportResponse} returns this
 */
proto.data_bridge.ImportResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes errorData = 2;
 * @return {string}
 */
proto.data_bridge.ImportResponse.prototype.getErrordata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes errorData = 2;
 * This is a type-conversion wrapper around `getErrordata()`
 * @return {string}
 */
proto.data_bridge.ImportResponse.prototype.getErrordata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrordata()));
};


/**
 * optional bytes errorData = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrordata()`
 * @return {!Uint8Array}
 */
proto.data_bridge.ImportResponse.prototype.getErrordata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrordata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.data_bridge.ImportResponse} returns this
 */
proto.data_bridge.ImportResponse.prototype.setErrordata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string flow = 3;
 * @return {string}
 */
proto.data_bridge.ImportResponse.prototype.getFlow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.ImportResponse} returns this
 */
proto.data_bridge.ImportResponse.prototype.setFlow = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.data_bridge.CreateImportHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data_bridge.CreateImportHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.CreateImportHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdBy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fileSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    numberLines: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fileHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 8, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    companyId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    warehouseId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    uploadedAt: jspb.Message.getFieldWithDefault(msg, 12, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data_bridge.CreateImportHistoryRequest}
 */
proto.data_bridge.CreateImportHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data_bridge.CreateImportHistoryRequest;
  return proto.data_bridge.CreateImportHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data_bridge.CreateImportHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data_bridge.CreateImportHistoryRequest}
 */
proto.data_bridge.CreateImportHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFileSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberLines(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileHash(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarehouseId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUploadedAt(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data_bridge.CreateImportHistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data_bridge.CreateImportHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.CreateImportHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFileSize();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNumberLines();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getFileHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCompanyId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getWarehouseId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUploadedAt();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string status = 3;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string created_by = 4;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 file_size = 5;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setFileSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 number_lines = 6;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getNumberLines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setNumberLines = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string file_hash = 7;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getFileHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setFileHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string metadata = 8;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string client_id = 9;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string company_id = 10;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getCompanyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setCompanyId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string warehouse_id = 11;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getWarehouseId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setWarehouseId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int64 uploaded_at = 12;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getUploadedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setUploadedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string filename = 13;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryRequest} returns this
 */
proto.data_bridge.CreateImportHistoryRequest.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.data_bridge.CreateImportHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.data_bridge.CreateImportHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.CreateImportHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deletedAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    path: jspb.Message.getFieldWithDefault(msg, 5, ""),
    type: jspb.Message.getFieldWithDefault(msg, 6, ""),
    status: jspb.Message.getFieldWithDefault(msg, 7, ""),
    uploadedAt: jspb.Message.getFieldWithDefault(msg, 8, 0),
    processedAt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    createdBy: jspb.Message.getFieldWithDefault(msg, 10, ""),
    fileSize: jspb.Message.getFieldWithDefault(msg, 11, 0),
    numberLines: jspb.Message.getFieldWithDefault(msg, 12, 0),
    fileHash: jspb.Message.getFieldWithDefault(msg, 13, ""),
    metadata: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.data_bridge.CreateImportHistoryResponse}
 */
proto.data_bridge.CreateImportHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.data_bridge.CreateImportHistoryResponse;
  return proto.data_bridge.CreateImportHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.data_bridge.CreateImportHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.data_bridge.CreateImportHistoryResponse}
 */
proto.data_bridge.CreateImportHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeletedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUploadedAt(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProcessedAt(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedBy(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFileSize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberLines(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileHash(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.data_bridge.CreateImportHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.data_bridge.CreateImportHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.data_bridge.CreateImportHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDeletedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUploadedAt();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getProcessedAt();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getCreatedBy();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFileSize();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getNumberLines();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getFileHash();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 created_at = 2;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 updated_at = 3;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 deleted_at = 4;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getDeletedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setDeletedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string type = 6;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string status = 7;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 uploaded_at = 8;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getUploadedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setUploadedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 processed_at = 9;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getProcessedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setProcessedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string created_by = 10;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getCreatedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setCreatedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 file_size = 11;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setFileSize = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 number_lines = 12;
 * @return {number}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getNumberLines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setNumberLines = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string file_hash = 13;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getFileHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setFileHash = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string metadata = 14;
 * @return {string}
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.data_bridge.CreateImportHistoryResponse} returns this
 */
proto.data_bridge.CreateImportHistoryResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


goog.object.extend(exports, proto.data_bridge);
