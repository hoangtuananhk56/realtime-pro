syntax = "proto3";

package company;
import "google/protobuf/empty.proto";
option go_package="broker-service/pb/company";


message Company {
  string id = 1;
  string nom = 2;
  string code = 3;
  string code_nom = 4;
  int64 created_at = 5;
  int64 updated_at = 6;
  repeated WarehouseCompanyTable warehouse_company = 7;
  bool block_del = 8;
  bool require_anomaly = 9;
}

message WarehouseCompanyTable {
  string id = 1;
  string warehouse_code_nom = 2;
  string warehouse_id = 3;
  string company_code_nom = 4;
  string company_id = 5;
}

message WarehouseCompanyDto {
  string id = 1;
  string warehouse_code_nom = 2;
  string warehouse_id = 3;
  bool block_del = 4;
  string company_code_nom = 5;
  string company_id = 6;
}

message CompanyRequest {
  string id = 1;
  string nom = 2;
  string code = 3;
  string code_nom = 4;
  int64 create_at = 5;
  int64 update_at = 6;
}

message WarehouseCompany {
  string id = 1;
  string code_nom = 2;
}

message CompanyWithWarehouseRequest {
  string id = 1;
  string nom = 2;
  string code = 3;
  string code_nom = 4;
  repeated WarehouseCompany Warehouses = 5;
  int64 create_at = 6;
  int64 update_at = 7;
}

message CompanyRequestInput {
  string nom = 1;
  string code = 2;
  repeated string warehouse_ids = 3;
}


message WarehouseRequest {
  repeated string ids = 1;
}

message MetaData {
  int32 count = 1;
  int32 offset = 2;
  int32 limit  = 3;
  int64 total  = 4;
}

message Response {
  CompanyRequest entryCompany = 1;
  WarehouseRequest entryWarehouse = 2;
  string messageError = 3;
}

message CreateCompanyRequest {
  string nom = 1;
  string code = 2;
  repeated string warehouse_ids = 3;
  optional bool require_anomaly = 4;
}
  
message UpdateCompanyRequest {
  string id = 1;
  string nom = 2;
  string code = 3;
  repeated string warehouse_ids = 4;
  optional bool require_anomaly = 5;
}

message GetAllRequest {
  int32 limit = 1;
  int32 offset = 2;
  string order = 3;
}

message GetAllResponse {
  repeated CompanyWithWarehouseRequest entry = 1;
  MetaData metadata = 2;
  string messageError = 3;
}

message WarehouseIdRequest {
  string warehouse_id = 1;
}

message GetAllCompaniesByWarehouseIdResponse {
  repeated WarehouseCompany entry = 1;
  string messageError = 3;
}

message DeleteCompanyRequest {
  string id = 1;
}

message DeleteCompanyResponse {
  int32 status = 1;
  string message_error = 2;
}

message FindCompanyByIdRequest {
  string id = 1;
}

message FindCompanyByIdResponse {
  int32 status = 1;
  string message_error = 2;
  Company entry = 3;
}

message UpdateCompanyResponse {
  int32 status = 1;
  string message_error = 2;
  Company entry = 3;
}

message GetAllCompanyWarehouseForUpdateRequest {
  string id = 1;
}

message GetAllCompanyWarehouseForUpdateResponse {
  int32 status = 1;
  string message_error = 2;
  repeated WarehouseCompanyDto entry = 3;
}

message DeleteManyCompanyRequest {
  repeated string ids = 1;
}

message DeleteManyCompanyResponse {
  int32 status = 1;
  string message_error = 2;
  repeated string companies_no_permit_to_delete = 3;
}

message GetAllCompanyListRequest {
  optional string company_id = 1;
  repeated string warehouses = 2;
}

message GetAllCompanyListResponse {
  int32 status = 1;
  string message_error = 2;
  repeated CompanyData companies = 3;
}

message CompanyData {
  string warehouse_id = 1;
  repeated CompanyItem companies = 2;
}

message CompanyItem {
  string company_id = 1;
  string code_nom = 2;
}


service CompanyService {
  rpc CreateCompany(CreateCompanyRequest) returns (google.protobuf.Empty) {};
  rpc UpdateCompany(UpdateCompanyRequest) returns (google.protobuf.Empty) {};
  rpc GetAll(GetAllRequest) returns (GetAllResponse) {};
  rpc GetAllCompaniesByWarehouseId(WarehouseIdRequest) returns (GetAllCompaniesByWarehouseIdResponse) {};
  rpc GetAllCompanyWarehouseForUpdate(GetAllCompanyWarehouseForUpdateRequest) returns (GetAllCompanyWarehouseForUpdateResponse) {};

  rpc FindCompanyById(FindCompanyByIdRequest) returns (FindCompanyByIdResponse) {};

  rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse) {};
  rpc DeleteManyCompany(DeleteManyCompanyRequest) returns (DeleteManyCompanyResponse) {};
  rpc GetAllCompanyList(GetAllCompanyListRequest) returns (GetAllCompanyListResponse) {};

}