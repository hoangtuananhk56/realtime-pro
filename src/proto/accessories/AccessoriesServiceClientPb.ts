/**
 * @fileoverview gRPC-Web generated client stub for accessories
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/accessories/accessories.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_accessories_accessories_pb from '../../proto/accessories/accessories_pb'; // proto import: "proto/accessories/accessories.proto"


export class AccessoriesServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetCompanyWarehouseByUserID = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/GetCompanyWarehouseByUserID',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.GetCompanyWarehouseByUserIdRequest,
    proto_accessories_accessories_pb.GetCompanyWarehouseResponse,
    (request: proto_accessories_accessories_pb.GetCompanyWarehouseByUserIdRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.GetCompanyWarehouseResponse.deserializeBinary
  );

  getCompanyWarehouseByUserID(
    request: proto_accessories_accessories_pb.GetCompanyWarehouseByUserIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.GetCompanyWarehouseResponse>;

  getCompanyWarehouseByUserID(
    request: proto_accessories_accessories_pb.GetCompanyWarehouseByUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetCompanyWarehouseResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.GetCompanyWarehouseResponse>;

  getCompanyWarehouseByUserID(
    request: proto_accessories_accessories_pb.GetCompanyWarehouseByUserIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetCompanyWarehouseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/GetCompanyWarehouseByUserID',
        request,
        metadata || {},
        this.methodDescriptorGetCompanyWarehouseByUserID,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/GetCompanyWarehouseByUserID',
    request,
    metadata || {},
    this.methodDescriptorGetCompanyWarehouseByUserID);
  }

  methodDescriptorGetCompanyWarehouse = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/GetCompanyWarehouse',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.GetCompanyWarehouseRequest,
    proto_accessories_accessories_pb.GetCompanyWarehouseResponse,
    (request: proto_accessories_accessories_pb.GetCompanyWarehouseRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.GetCompanyWarehouseResponse.deserializeBinary
  );

  getCompanyWarehouse(
    request: proto_accessories_accessories_pb.GetCompanyWarehouseRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.GetCompanyWarehouseResponse>;

  getCompanyWarehouse(
    request: proto_accessories_accessories_pb.GetCompanyWarehouseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetCompanyWarehouseResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.GetCompanyWarehouseResponse>;

  getCompanyWarehouse(
    request: proto_accessories_accessories_pb.GetCompanyWarehouseRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetCompanyWarehouseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/GetCompanyWarehouse',
        request,
        metadata || {},
        this.methodDescriptorGetCompanyWarehouse,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/GetCompanyWarehouse',
    request,
    metadata || {},
    this.methodDescriptorGetCompanyWarehouse);
  }

  methodDescriptorFilterForCompany = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/FilterForCompany',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.FilterForCompanyRequest,
    proto_accessories_accessories_pb.FilterForCompanyResponse,
    (request: proto_accessories_accessories_pb.FilterForCompanyRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.FilterForCompanyResponse.deserializeBinary
  );

  filterForCompany(
    request: proto_accessories_accessories_pb.FilterForCompanyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.FilterForCompanyResponse>;

  filterForCompany(
    request: proto_accessories_accessories_pb.FilterForCompanyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForCompanyResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.FilterForCompanyResponse>;

  filterForCompany(
    request: proto_accessories_accessories_pb.FilterForCompanyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForCompanyResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/FilterForCompany',
        request,
        metadata || {},
        this.methodDescriptorFilterForCompany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/FilterForCompany',
    request,
    metadata || {},
    this.methodDescriptorFilterForCompany);
  }

  methodDescriptorFilterForClient = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/FilterForClient',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.FilterForClientRequest,
    proto_accessories_accessories_pb.FilterForClientResponse,
    (request: proto_accessories_accessories_pb.FilterForClientRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.FilterForClientResponse.deserializeBinary
  );

  filterForClient(
    request: proto_accessories_accessories_pb.FilterForClientRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.FilterForClientResponse>;

  filterForClient(
    request: proto_accessories_accessories_pb.FilterForClientRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForClientResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.FilterForClientResponse>;

  filterForClient(
    request: proto_accessories_accessories_pb.FilterForClientRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForClientResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/FilterForClient',
        request,
        metadata || {},
        this.methodDescriptorFilterForClient,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/FilterForClient',
    request,
    metadata || {},
    this.methodDescriptorFilterForClient);
  }

  methodDescriptorFilterForWarehouse = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/FilterForWarehouse',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.FilterForWarehouseRequest,
    proto_accessories_accessories_pb.FilterForWarehouseResponse,
    (request: proto_accessories_accessories_pb.FilterForWarehouseRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.FilterForWarehouseResponse.deserializeBinary
  );

  filterForWarehouse(
    request: proto_accessories_accessories_pb.FilterForWarehouseRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.FilterForWarehouseResponse>;

  filterForWarehouse(
    request: proto_accessories_accessories_pb.FilterForWarehouseRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForWarehouseResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.FilterForWarehouseResponse>;

  filterForWarehouse(
    request: proto_accessories_accessories_pb.FilterForWarehouseRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForWarehouseResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/FilterForWarehouse',
        request,
        metadata || {},
        this.methodDescriptorFilterForWarehouse,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/FilterForWarehouse',
    request,
    metadata || {},
    this.methodDescriptorFilterForWarehouse);
  }

  methodDescriptorFilterForNiveau = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/FilterForNiveau',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.FilterForNiveauRequest,
    proto_accessories_accessories_pb.FilterForNiveauResponse,
    (request: proto_accessories_accessories_pb.FilterForNiveauRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.FilterForNiveauResponse.deserializeBinary
  );

  filterForNiveau(
    request: proto_accessories_accessories_pb.FilterForNiveauRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.FilterForNiveauResponse>;

  filterForNiveau(
    request: proto_accessories_accessories_pb.FilterForNiveauRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForNiveauResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.FilterForNiveauResponse>;

  filterForNiveau(
    request: proto_accessories_accessories_pb.FilterForNiveauRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.FilterForNiveauResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/FilterForNiveau',
        request,
        metadata || {},
        this.methodDescriptorFilterForNiveau,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/FilterForNiveau',
    request,
    metadata || {},
    this.methodDescriptorFilterForNiveau);
  }

  methodDescriptorGetTotal = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/GetTotal',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.GetTotalRequest,
    proto_accessories_accessories_pb.GetTotalResponse,
    (request: proto_accessories_accessories_pb.GetTotalRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.GetTotalResponse.deserializeBinary
  );

  getTotal(
    request: proto_accessories_accessories_pb.GetTotalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.GetTotalResponse>;

  getTotal(
    request: proto_accessories_accessories_pb.GetTotalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetTotalResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.GetTotalResponse>;

  getTotal(
    request: proto_accessories_accessories_pb.GetTotalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetTotalResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/GetTotal',
        request,
        metadata || {},
        this.methodDescriptorGetTotal,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/GetTotal',
    request,
    metadata || {},
    this.methodDescriptorGetTotal);
  }

  methodDescriptorGetDashboardFilterData = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/GetDashboardFilterData',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.GetDashboardInformationRequest,
    proto_accessories_accessories_pb.GetDashboardFilterResponse,
    (request: proto_accessories_accessories_pb.GetDashboardInformationRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.GetDashboardFilterResponse.deserializeBinary
  );

  getDashboardFilterData(
    request: proto_accessories_accessories_pb.GetDashboardInformationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.GetDashboardFilterResponse>;

  getDashboardFilterData(
    request: proto_accessories_accessories_pb.GetDashboardInformationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetDashboardFilterResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.GetDashboardFilterResponse>;

  getDashboardFilterData(
    request: proto_accessories_accessories_pb.GetDashboardInformationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.GetDashboardFilterResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/GetDashboardFilterData',
        request,
        metadata || {},
        this.methodDescriptorGetDashboardFilterData,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/GetDashboardFilterData',
    request,
    metadata || {},
    this.methodDescriptorGetDashboardFilterData);
  }

  methodDescriptorValidWarningDluo = new grpcWeb.MethodDescriptor(
    '/accessories.AccessoriesService/ValidWarningDluo',
    grpcWeb.MethodType.UNARY,
    proto_accessories_accessories_pb.ValidWarningDluoRequest,
    proto_accessories_accessories_pb.ValidWarningDluoResponse,
    (request: proto_accessories_accessories_pb.ValidWarningDluoRequest) => {
      return request.serializeBinary();
    },
    proto_accessories_accessories_pb.ValidWarningDluoResponse.deserializeBinary
  );

  validWarningDluo(
    request: proto_accessories_accessories_pb.ValidWarningDluoRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_accessories_accessories_pb.ValidWarningDluoResponse>;

  validWarningDluo(
    request: proto_accessories_accessories_pb.ValidWarningDluoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.ValidWarningDluoResponse) => void): grpcWeb.ClientReadableStream<proto_accessories_accessories_pb.ValidWarningDluoResponse>;

  validWarningDluo(
    request: proto_accessories_accessories_pb.ValidWarningDluoRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_accessories_accessories_pb.ValidWarningDluoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/accessories.AccessoriesService/ValidWarningDluo',
        request,
        metadata || {},
        this.methodDescriptorValidWarningDluo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/accessories.AccessoriesService/ValidWarningDluo',
    request,
    metadata || {},
    this.methodDescriptorValidWarningDluo);
  }

}

