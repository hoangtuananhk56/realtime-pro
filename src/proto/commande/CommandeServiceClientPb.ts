/**
 * @fileoverview gRPC-Web generated client stub for commande
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/commande/commande.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_commande_commande_pb from '../../proto/commande/commande_pb'; // proto import: "proto/commande/commande.proto"
import * as proto_export_export_pb from '../../proto/export/export_pb'; // proto import: "proto/export/export.proto"


export class CommandeServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/Create',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.CreateRequest,
    proto_commande_commande_pb.Response,
    (request: proto_commande_commande_pb.CreateRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.Response.deserializeBinary
  );

  create(
    request: proto_commande_commande_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.Response>;

  create(
    request: proto_commande_commande_pb.CreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.Response) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.Response>;

  create(
    request: proto_commande_commande_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.Response) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorGetByID = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/GetByID',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.GetByIdRequest,
    proto_commande_commande_pb.Response,
    (request: proto_commande_commande_pb.GetByIdRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.Response.deserializeBinary
  );

  getByID(
    request: proto_commande_commande_pb.GetByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.Response>;

  getByID(
    request: proto_commande_commande_pb.GetByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.Response) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.Response>;

  getByID(
    request: proto_commande_commande_pb.GetByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.Response) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/GetByID',
        request,
        metadata || {},
        this.methodDescriptorGetByID,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/GetByID',
    request,
    metadata || {},
    this.methodDescriptorGetByID);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/Update',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.UpdateRequest,
    proto_commande_commande_pb.UpdateResponse,
    (request: proto_commande_commande_pb.UpdateRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.UpdateResponse.deserializeBinary
  );

  update(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.UpdateResponse>;

  update(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UpdateResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.UpdateResponse>;

  update(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UpdateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorValidCom = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/ValidCom',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.UpdateRequest,
    proto_commande_commande_pb.ValidComResponse,
    (request: proto_commande_commande_pb.UpdateRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.ValidComResponse.deserializeBinary
  );

  validCom(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.ValidComResponse>;

  validCom(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.ValidComResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.ValidComResponse>;

  validCom(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.ValidComResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/ValidCom',
        request,
        metadata || {},
        this.methodDescriptorValidCom,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/ValidCom',
    request,
    metadata || {},
    this.methodDescriptorValidCom);
  }

  methodDescriptorSearchStock = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/SearchStock',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.UpdateRequest,
    proto_commande_commande_pb.ValidComResponse,
    (request: proto_commande_commande_pb.UpdateRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.ValidComResponse.deserializeBinary
  );

  searchStock(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.ValidComResponse>;

  searchStock(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.ValidComResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.ValidComResponse>;

  searchStock(
    request: proto_commande_commande_pb.UpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.ValidComResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/SearchStock',
        request,
        metadata || {},
        this.methodDescriptorSearchStock,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/SearchStock',
    request,
    metadata || {},
    this.methodDescriptorSearchStock);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/Delete',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.CheckLastestRequest,
    proto_commande_commande_pb.DeleteResponse,
    (request: proto_commande_commande_pb.CheckLastestRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.DeleteResponse.deserializeBinary
  );

  delete(
    request: proto_commande_commande_pb.CheckLastestRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.DeleteResponse>;

  delete(
    request: proto_commande_commande_pb.CheckLastestRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.DeleteResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.DeleteResponse>;

  delete(
    request: proto_commande_commande_pb.CheckLastestRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.DeleteResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

  methodDescriptorDeleteFile = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/DeleteFile',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.DelFileRequest,
    proto_commande_commande_pb.DeleteResponse,
    (request: proto_commande_commande_pb.DelFileRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.DeleteResponse.deserializeBinary
  );

  deleteFile(
    request: proto_commande_commande_pb.DelFileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.DeleteResponse>;

  deleteFile(
    request: proto_commande_commande_pb.DelFileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.DeleteResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.DeleteResponse>;

  deleteFile(
    request: proto_commande_commande_pb.DelFileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.DeleteResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/DeleteFile',
        request,
        metadata || {},
        this.methodDescriptorDeleteFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/DeleteFile',
    request,
    metadata || {},
    this.methodDescriptorDeleteFile);
  }

  methodDescriptorGetAll = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/GetAll',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.GetAllRequest,
    proto_commande_commande_pb.GetAllResponse,
    (request: proto_commande_commande_pb.GetAllRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.GetAllResponse.deserializeBinary
  );

  getAll(
    request: proto_commande_commande_pb.GetAllRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.GetAllResponse>;

  getAll(
    request: proto_commande_commande_pb.GetAllRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.GetAllResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.GetAllResponse>;

  getAll(
    request: proto_commande_commande_pb.GetAllRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.GetAllResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/GetAll',
        request,
        metadata || {},
        this.methodDescriptorGetAll,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/GetAll',
    request,
    metadata || {},
    this.methodDescriptorGetAll);
  }

  methodDescriptorCreateAutoFile = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/CreateAutoFile',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.ComFile,
    proto_commande_commande_pb.CreateAutoFileResponse,
    (request: proto_commande_commande_pb.ComFile) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.CreateAutoFileResponse.deserializeBinary
  );

  createAutoFile(
    request: proto_commande_commande_pb.ComFile,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.CreateAutoFileResponse>;

  createAutoFile(
    request: proto_commande_commande_pb.ComFile,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.CreateAutoFileResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.CreateAutoFileResponse>;

  createAutoFile(
    request: proto_commande_commande_pb.ComFile,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.CreateAutoFileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/CreateAutoFile',
        request,
        metadata || {},
        this.methodDescriptorCreateAutoFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/CreateAutoFile',
    request,
    metadata || {},
    this.methodDescriptorCreateAutoFile);
  }

  methodDescriptorCancel = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/Cancel',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.CreateRequest,
    proto_commande_commande_pb.Response,
    (request: proto_commande_commande_pb.CreateRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.Response.deserializeBinary
  );

  cancel(
    request: proto_commande_commande_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.Response>;

  cancel(
    request: proto_commande_commande_pb.CreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.Response) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.Response>;

  cancel(
    request: proto_commande_commande_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.Response) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/Cancel',
        request,
        metadata || {},
        this.methodDescriptorCancel,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/Cancel',
    request,
    metadata || {},
    this.methodDescriptorCancel);
  }

  methodDescriptorUpdateActiveLotStatus = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/UpdateActiveLotStatus',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.UpdateActiveLotRequest,
    proto_commande_commande_pb.UpdateActiveLotResponse,
    (request: proto_commande_commande_pb.UpdateActiveLotRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.UpdateActiveLotResponse.deserializeBinary
  );

  updateActiveLotStatus(
    request: proto_commande_commande_pb.UpdateActiveLotRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.UpdateActiveLotResponse>;

  updateActiveLotStatus(
    request: proto_commande_commande_pb.UpdateActiveLotRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UpdateActiveLotResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.UpdateActiveLotResponse>;

  updateActiveLotStatus(
    request: proto_commande_commande_pb.UpdateActiveLotRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UpdateActiveLotResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/UpdateActiveLotStatus',
        request,
        metadata || {},
        this.methodDescriptorUpdateActiveLotStatus,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/UpdateActiveLotStatus',
    request,
    metadata || {},
    this.methodDescriptorUpdateActiveLotStatus);
  }

  methodDescriptorRapportFileGenerator = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/RapportFileGenerator',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.RaportFile,
    proto_commande_commande_pb.UploadResponse,
    (request: proto_commande_commande_pb.RaportFile) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.UploadResponse.deserializeBinary
  );

  rapportFileGenerator(
    request: proto_commande_commande_pb.RaportFile,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.UploadResponse>;

  rapportFileGenerator(
    request: proto_commande_commande_pb.RaportFile,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UploadResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.UploadResponse>;

  rapportFileGenerator(
    request: proto_commande_commande_pb.RaportFile,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UploadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/RapportFileGenerator',
        request,
        metadata || {},
        this.methodDescriptorRapportFileGenerator,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/RapportFileGenerator',
    request,
    metadata || {},
    this.methodDescriptorRapportFileGenerator);
  }

  methodDescriptorDePrelevementFileGenerator = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/DePrelevementFileGenerator',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.DePrelevement,
    proto_commande_commande_pb.UploadResponse,
    (request: proto_commande_commande_pb.DePrelevement) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.UploadResponse.deserializeBinary
  );

  dePrelevementFileGenerator(
    request: proto_commande_commande_pb.DePrelevement,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.UploadResponse>;

  dePrelevementFileGenerator(
    request: proto_commande_commande_pb.DePrelevement,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UploadResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.UploadResponse>;

  dePrelevementFileGenerator(
    request: proto_commande_commande_pb.DePrelevement,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.UploadResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/DePrelevementFileGenerator',
        request,
        metadata || {},
        this.methodDescriptorDePrelevementFileGenerator,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/DePrelevementFileGenerator',
    request,
    metadata || {},
    this.methodDescriptorDePrelevementFileGenerator);
  }

  methodDescriptorCheckLastest = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/CheckLastest',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.CheckLastestRequest,
    proto_commande_commande_pb.CheckLastestResponse,
    (request: proto_commande_commande_pb.CheckLastestRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.CheckLastestResponse.deserializeBinary
  );

  checkLastest(
    request: proto_commande_commande_pb.CheckLastestRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.CheckLastestResponse>;

  checkLastest(
    request: proto_commande_commande_pb.CheckLastestRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.CheckLastestResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.CheckLastestResponse>;

  checkLastest(
    request: proto_commande_commande_pb.CheckLastestRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.CheckLastestResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/CheckLastest',
        request,
        metadata || {},
        this.methodDescriptorCheckLastest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/CheckLastest',
    request,
    metadata || {},
    this.methodDescriptorCheckLastest);
  }

  methodDescriptorSendOnMission = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/SendOnMission',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.SenOnMissionRequest,
    proto_commande_commande_pb.SenOnMissionResponse,
    (request: proto_commande_commande_pb.SenOnMissionRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.SenOnMissionResponse.deserializeBinary
  );

  sendOnMission(
    request: proto_commande_commande_pb.SenOnMissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.SenOnMissionResponse>;

  sendOnMission(
    request: proto_commande_commande_pb.SenOnMissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.SenOnMissionResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.SenOnMissionResponse>;

  sendOnMission(
    request: proto_commande_commande_pb.SenOnMissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.SenOnMissionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/SendOnMission',
        request,
        metadata || {},
        this.methodDescriptorSendOnMission,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/SendOnMission',
    request,
    metadata || {},
    this.methodDescriptorSendOnMission);
  }

  methodDescriptorCancelOptimize = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/CancelOptimize',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.CancelRequest,
    proto_commande_commande_pb.CancelResponse,
    (request: proto_commande_commande_pb.CancelRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.CancelResponse.deserializeBinary
  );

  cancelOptimize(
    request: proto_commande_commande_pb.CancelRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.CancelResponse>;

  cancelOptimize(
    request: proto_commande_commande_pb.CancelRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.CancelResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.CancelResponse>;

  cancelOptimize(
    request: proto_commande_commande_pb.CancelRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.CancelResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/CancelOptimize',
        request,
        metadata || {},
        this.methodDescriptorCancelOptimize,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/CancelOptimize',
    request,
    metadata || {},
    this.methodDescriptorCancelOptimize);
  }

  methodDescriptorGetDashboardInformation = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/GetDashboardInformation',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.GetDashboardInformationRequest,
    proto_commande_commande_pb.GetDashboardInformationResponse,
    (request: proto_commande_commande_pb.GetDashboardInformationRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.GetDashboardInformationResponse.deserializeBinary
  );

  getDashboardInformation(
    request: proto_commande_commande_pb.GetDashboardInformationRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.GetDashboardInformationResponse>;

  getDashboardInformation(
    request: proto_commande_commande_pb.GetDashboardInformationRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.GetDashboardInformationResponse) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.GetDashboardInformationResponse>;

  getDashboardInformation(
    request: proto_commande_commande_pb.GetDashboardInformationRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.GetDashboardInformationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/GetDashboardInformation',
        request,
        metadata || {},
        this.methodDescriptorGetDashboardInformation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/GetDashboardInformation',
    request,
    metadata || {},
    this.methodDescriptorGetDashboardInformation);
  }

  methodDescriptorGetCommandeHistoryByID = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/GetCommandeHistoryByID',
    grpcWeb.MethodType.UNARY,
    proto_commande_commande_pb.GetCommandeHistoryByIdRequest,
    proto_commande_commande_pb.ResponseHistory,
    (request: proto_commande_commande_pb.GetCommandeHistoryByIdRequest) => {
      return request.serializeBinary();
    },
    proto_commande_commande_pb.ResponseHistory.deserializeBinary
  );

  getCommandeHistoryByID(
    request: proto_commande_commande_pb.GetCommandeHistoryByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_commande_commande_pb.ResponseHistory>;

  getCommandeHistoryByID(
    request: proto_commande_commande_pb.GetCommandeHistoryByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.ResponseHistory) => void): grpcWeb.ClientReadableStream<proto_commande_commande_pb.ResponseHistory>;

  getCommandeHistoryByID(
    request: proto_commande_commande_pb.GetCommandeHistoryByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_commande_commande_pb.ResponseHistory) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/GetCommandeHistoryByID',
        request,
        metadata || {},
        this.methodDescriptorGetCommandeHistoryByID,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/GetCommandeHistoryByID',
    request,
    metadata || {},
    this.methodDescriptorGetCommandeHistoryByID);
  }

  methodDescriptorExportAllCommandes = new grpcWeb.MethodDescriptor(
    '/commande.CommandeService/ExportAllCommandes',
    grpcWeb.MethodType.UNARY,
    proto_export_export_pb.ExportAllCommandeRequest,
    proto_export_export_pb.ExportResponse,
    (request: proto_export_export_pb.ExportAllCommandeRequest) => {
      return request.serializeBinary();
    },
    proto_export_export_pb.ExportResponse.deserializeBinary
  );

  exportAllCommandes(
    request: proto_export_export_pb.ExportAllCommandeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_export_export_pb.ExportResponse>;

  exportAllCommandes(
    request: proto_export_export_pb.ExportAllCommandeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_export_export_pb.ExportResponse) => void): grpcWeb.ClientReadableStream<proto_export_export_pb.ExportResponse>;

  exportAllCommandes(
    request: proto_export_export_pb.ExportAllCommandeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_export_export_pb.ExportResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/commande.CommandeService/ExportAllCommandes',
        request,
        metadata || {},
        this.methodDescriptorExportAllCommandes,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/commande.CommandeService/ExportAllCommandes',
    request,
    metadata || {},
    this.methodDescriptorExportAllCommandes);
  }

}

