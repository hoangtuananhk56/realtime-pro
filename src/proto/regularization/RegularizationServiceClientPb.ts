/**
 * @fileoverview gRPC-Web generated client stub for regularization
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/regularization/regularization.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_regularization_regularization_pb from '../../proto/regularization/regularization_pb'; // proto import: "proto/regularization/regularization.proto"


export class RegularizationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAllReason = new grpcWeb.MethodDescriptor(
    '/regularization.RegularizationService/GetAllReason',
    grpcWeb.MethodType.UNARY,
    proto_regularization_regularization_pb.GetAllReasonRequest,
    proto_regularization_regularization_pb.GetAllReasonResponse,
    (request: proto_regularization_regularization_pb.GetAllReasonRequest) => {
      return request.serializeBinary();
    },
    proto_regularization_regularization_pb.GetAllReasonResponse.deserializeBinary
  );

  getAllReason(
    request: proto_regularization_regularization_pb.GetAllReasonRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_regularization_regularization_pb.GetAllReasonResponse>;

  getAllReason(
    request: proto_regularization_regularization_pb.GetAllReasonRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_regularization_regularization_pb.GetAllReasonResponse) => void): grpcWeb.ClientReadableStream<proto_regularization_regularization_pb.GetAllReasonResponse>;

  getAllReason(
    request: proto_regularization_regularization_pb.GetAllReasonRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_regularization_regularization_pb.GetAllReasonResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/regularization.RegularizationService/GetAllReason',
        request,
        metadata || {},
        this.methodDescriptorGetAllReason,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/regularization.RegularizationService/GetAllReason',
    request,
    metadata || {},
    this.methodDescriptorGetAllReason);
  }

  methodDescriptorCreateReg = new grpcWeb.MethodDescriptor(
    '/regularization.RegularizationService/CreateReg',
    grpcWeb.MethodType.UNARY,
    proto_regularization_regularization_pb.CreateRegRequest,
    proto_regularization_regularization_pb.CreateRegResponse,
    (request: proto_regularization_regularization_pb.CreateRegRequest) => {
      return request.serializeBinary();
    },
    proto_regularization_regularization_pb.CreateRegResponse.deserializeBinary
  );

  createReg(
    request: proto_regularization_regularization_pb.CreateRegRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_regularization_regularization_pb.CreateRegResponse>;

  createReg(
    request: proto_regularization_regularization_pb.CreateRegRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_regularization_regularization_pb.CreateRegResponse) => void): grpcWeb.ClientReadableStream<proto_regularization_regularization_pb.CreateRegResponse>;

  createReg(
    request: proto_regularization_regularization_pb.CreateRegRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_regularization_regularization_pb.CreateRegResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/regularization.RegularizationService/CreateReg',
        request,
        metadata || {},
        this.methodDescriptorCreateReg,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/regularization.RegularizationService/CreateReg',
    request,
    metadata || {},
    this.methodDescriptorCreateReg);
  }

}

