/**
 * @fileoverview gRPC-Web generated client stub for file
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/file/file.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_file_file_pb from '../../proto/file/file_pb'; // proto import: "proto/file/file.proto"


export class FileServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorDownload = new grpcWeb.MethodDescriptor(
    '/file.FileService/Download',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_file_file_pb.DownloadRequest,
    proto_file_file_pb.DownloadResponse,
    (request: proto_file_file_pb.DownloadRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.DownloadResponse.deserializeBinary
  );

  download(
    request: proto_file_file_pb.DownloadRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_file_file_pb.DownloadResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/file.FileService/Download',
      request,
      metadata || {},
      this.methodDescriptorDownload);
  }

  methodDescriptorGetUrlDownload = new grpcWeb.MethodDescriptor(
    '/file.FileService/GetUrlDownload',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.DownloadRequest,
    proto_file_file_pb.UrlResponse,
    (request: proto_file_file_pb.DownloadRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.UrlResponse.deserializeBinary
  );

  getUrlDownload(
    request: proto_file_file_pb.DownloadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.UrlResponse>;

  getUrlDownload(
    request: proto_file_file_pb.DownloadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.UrlResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.UrlResponse>;

  getUrlDownload(
    request: proto_file_file_pb.DownloadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.UrlResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/GetUrlDownload',
        request,
        metadata || {},
        this.methodDescriptorGetUrlDownload,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/GetUrlDownload',
    request,
    metadata || {},
    this.methodDescriptorGetUrlDownload);
  }

  methodDescriptorGetUrl = new grpcWeb.MethodDescriptor(
    '/file.FileService/GetUrl',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.DownloadRequest,
    proto_file_file_pb.UrlResponse,
    (request: proto_file_file_pb.DownloadRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.UrlResponse.deserializeBinary
  );

  getUrl(
    request: proto_file_file_pb.DownloadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.UrlResponse>;

  getUrl(
    request: proto_file_file_pb.DownloadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.UrlResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.UrlResponse>;

  getUrl(
    request: proto_file_file_pb.DownloadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.UrlResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/GetUrl',
        request,
        metadata || {},
        this.methodDescriptorGetUrl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/GetUrl',
    request,
    metadata || {},
    this.methodDescriptorGetUrl);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/file.FileService/Delete',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.DeleteRequest,
    proto_file_file_pb.DeleteResponse,
    (request: proto_file_file_pb.DeleteRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.DeleteResponse.deserializeBinary
  );

  delete(
    request: proto_file_file_pb.DeleteRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.DeleteResponse>;

  delete(
    request: proto_file_file_pb.DeleteRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.DeleteResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.DeleteResponse>;

  delete(
    request: proto_file_file_pb.DeleteRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.DeleteResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

  methodDescriptorDeleteMulti = new grpcWeb.MethodDescriptor(
    '/file.FileService/DeleteMulti',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.DeleteMutltiRequest,
    proto_file_file_pb.DeleteMutltiResponse,
    (request: proto_file_file_pb.DeleteMutltiRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.DeleteMutltiResponse.deserializeBinary
  );

  deleteMulti(
    request: proto_file_file_pb.DeleteMutltiRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.DeleteMutltiResponse>;

  deleteMulti(
    request: proto_file_file_pb.DeleteMutltiRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.DeleteMutltiResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.DeleteMutltiResponse>;

  deleteMulti(
    request: proto_file_file_pb.DeleteMutltiRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.DeleteMutltiResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/DeleteMulti',
        request,
        metadata || {},
        this.methodDescriptorDeleteMulti,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/DeleteMulti',
    request,
    metadata || {},
    this.methodDescriptorDeleteMulti);
  }

  methodDescriptorGetAll = new grpcWeb.MethodDescriptor(
    '/file.FileService/GetAll',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.GetFilesInAtt,
    proto_file_file_pb.FilesResponse,
    (request: proto_file_file_pb.GetFilesInAtt) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.FilesResponse.deserializeBinary
  );

  getAll(
    request: proto_file_file_pb.GetFilesInAtt,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.FilesResponse>;

  getAll(
    request: proto_file_file_pb.GetFilesInAtt,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.FilesResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.FilesResponse>;

  getAll(
    request: proto_file_file_pb.GetFilesInAtt,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.FilesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/GetAll',
        request,
        metadata || {},
        this.methodDescriptorGetAll,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/GetAll',
    request,
    metadata || {},
    this.methodDescriptorGetAll);
  }

  methodDescriptorGetAllByClassAndId = new grpcWeb.MethodDescriptor(
    '/file.FileService/GetAllByClassAndId',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.GetAllByClassAndIdRequest,
    proto_file_file_pb.GetAllByClassAndIdResponse,
    (request: proto_file_file_pb.GetAllByClassAndIdRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.GetAllByClassAndIdResponse.deserializeBinary
  );

  getAllByClassAndId(
    request: proto_file_file_pb.GetAllByClassAndIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.GetAllByClassAndIdResponse>;

  getAllByClassAndId(
    request: proto_file_file_pb.GetAllByClassAndIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.GetAllByClassAndIdResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.GetAllByClassAndIdResponse>;

  getAllByClassAndId(
    request: proto_file_file_pb.GetAllByClassAndIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.GetAllByClassAndIdResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/GetAllByClassAndId',
        request,
        metadata || {},
        this.methodDescriptorGetAllByClassAndId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/GetAllByClassAndId',
    request,
    metadata || {},
    this.methodDescriptorGetAllByClassAndId);
  }

  methodDescriptorDownloadOneFile = new grpcWeb.MethodDescriptor(
    '/file.FileService/DownloadOneFile',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_file_file_pb.DownloadOneFileRequest,
    proto_file_file_pb.DownloadResponse,
    (request: proto_file_file_pb.DownloadOneFileRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.DownloadResponse.deserializeBinary
  );

  downloadOneFile(
    request: proto_file_file_pb.DownloadOneFileRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_file_file_pb.DownloadResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/file.FileService/DownloadOneFile',
      request,
      metadata || {},
      this.methodDescriptorDownloadOneFile);
  }

  methodDescriptorDeleteOneFile = new grpcWeb.MethodDescriptor(
    '/file.FileService/DeleteOneFile',
    grpcWeb.MethodType.UNARY,
    proto_file_file_pb.DownloadOneFileRequest,
    proto_file_file_pb.DeleteResponse,
    (request: proto_file_file_pb.DownloadOneFileRequest) => {
      return request.serializeBinary();
    },
    proto_file_file_pb.DeleteResponse.deserializeBinary
  );

  deleteOneFile(
    request: proto_file_file_pb.DownloadOneFileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_file_file_pb.DeleteResponse>;

  deleteOneFile(
    request: proto_file_file_pb.DownloadOneFileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.DeleteResponse) => void): grpcWeb.ClientReadableStream<proto_file_file_pb.DeleteResponse>;

  deleteOneFile(
    request: proto_file_file_pb.DownloadOneFileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_file_file_pb.DeleteResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/file.FileService/DeleteOneFile',
        request,
        metadata || {},
        this.methodDescriptorDeleteOneFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/file.FileService/DeleteOneFile',
    request,
    metadata || {},
    this.methodDescriptorDeleteOneFile);
  }

}

