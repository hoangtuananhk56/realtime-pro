/**
 * @fileoverview gRPC-Web generated client stub for message
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: proto/message/message.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_message_message_pb from '../../proto/message/message_pb'; // proto import: "proto/message/message.proto"


export class MessageServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateStream = new grpcWeb.MethodDescriptor(
    '/message.MessageService/CreateStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_message_message_pb.Connect,
    proto_message_message_pb.Message,
    (request: proto_message_message_pb.Connect) => {
      return request.serializeBinary();
    },
    proto_message_message_pb.Message.deserializeBinary
  );

  createStream(
    request: proto_message_message_pb.Connect,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_message_message_pb.Message> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/message.MessageService/CreateStream',
      request,
      metadata || {},
      this.methodDescriptorCreateStream);
  }

  methodDescriptorBroadcastMessage = new grpcWeb.MethodDescriptor(
    '/message.MessageService/BroadcastMessage',
    grpcWeb.MethodType.UNARY,
    proto_message_message_pb.Message,
    proto_message_message_pb.Close,
    (request: proto_message_message_pb.Message) => {
      return request.serializeBinary();
    },
    proto_message_message_pb.Close.deserializeBinary
  );

  broadcastMessage(
    request: proto_message_message_pb.Message,
    metadata?: grpcWeb.Metadata | null): Promise<proto_message_message_pb.Close>;

  broadcastMessage(
    request: proto_message_message_pb.Message,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_message_message_pb.Close) => void): grpcWeb.ClientReadableStream<proto_message_message_pb.Close>;

  broadcastMessage(
    request: proto_message_message_pb.Message,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_message_message_pb.Close) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/message.MessageService/BroadcastMessage',
        request,
        metadata || {},
        this.methodDescriptorBroadcastMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/message.MessageService/BroadcastMessage',
    request,
    metadata || {},
    this.methodDescriptorBroadcastMessage);
  }

  methodDescriptorCloseStream = new grpcWeb.MethodDescriptor(
    '/message.MessageService/CloseStream',
    grpcWeb.MethodType.UNARY,
    proto_message_message_pb.Connect,
    proto_message_message_pb.Close,
    (request: proto_message_message_pb.Connect) => {
      return request.serializeBinary();
    },
    proto_message_message_pb.Close.deserializeBinary
  );

  closeStream(
    request: proto_message_message_pb.Connect,
    metadata?: grpcWeb.Metadata | null): Promise<proto_message_message_pb.Close>;

  closeStream(
    request: proto_message_message_pb.Connect,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_message_message_pb.Close) => void): grpcWeb.ClientReadableStream<proto_message_message_pb.Close>;

  closeStream(
    request: proto_message_message_pb.Connect,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_message_message_pb.Close) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/message.MessageService/CloseStream',
        request,
        metadata || {},
        this.methodDescriptorCloseStream,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/message.MessageService/CloseStream',
    request,
    metadata || {},
    this.methodDescriptorCloseStream);
  }

}

