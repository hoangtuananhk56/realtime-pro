// source: proto/message/message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var proto_attendu_attendu_pb = require('../../proto/attendu/attendu_pb.js');
goog.object.extend(proto, proto_attendu_attendu_pb);
var proto_commande_commande_pb = require('../../proto/commande/commande_pb.js');
goog.object.extend(proto, proto_commande_commande_pb);
var proto_comarticle_comarticle_pb = require('../../proto/comarticle/comarticle_pb.js');
goog.object.extend(proto, proto_comarticle_comarticle_pb);
var proto_reference_reference_pb = require('../../proto/reference/reference_pb.js');
goog.object.extend(proto, proto_reference_reference_pb);
var proto_stock_stock_pb = require('../../proto/stock/stock_pb.js');
goog.object.extend(proto, proto_stock_stock_pb);
goog.exportSymbol('proto.message.Close', null, global);
goog.exportSymbol('proto.message.Connect', null, global);
goog.exportSymbol('proto.message.Message', null, global);
goog.exportSymbol('proto.message.Message.EventCase', null, global);
goog.exportSymbol('proto.message.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.User.displayName = 'proto.message.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.Connect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.Connect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.Connect.displayName = 'proto.message.Connect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.Close = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.Close, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.Close.displayName = 'proto.message.Close';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.message.Message.oneofGroups_);
};
goog.inherits(proto.message.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.Message.displayName = 'proto.message.Message';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.User.prototype.toObject = function(opt_includeInstance) {
  return proto.message.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomName: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.User}
 */
proto.message.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.User;
  return proto.message.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.User}
 */
proto.message.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.message.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.User} returns this
 */
proto.message.User.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.message.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.User} returns this
 */
proto.message.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string room_name = 4;
 * @return {string}
 */
proto.message.User.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.User} returns this
 */
proto.message.User.prototype.setRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.Connect.prototype.toObject = function(opt_includeInstance) {
  return proto.message.Connect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.Connect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Connect.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.message.User.toObject(includeInstance, f),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    roomName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    token: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.Connect}
 */
proto.message.Connect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.Connect;
  return proto.message.Connect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.Connect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.Connect}
 */
proto.message.Connect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.message.User;
      reader.readMessage(value,proto.message.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.Connect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.Connect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.Connect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Connect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.message.User.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.message.User}
 */
proto.message.Connect.prototype.getUser = function() {
  return /** @type{?proto.message.User} */ (
    jspb.Message.getWrapperField(this, proto.message.User, 1));
};


/**
 * @param {?proto.message.User|undefined} value
 * @return {!proto.message.Connect} returns this
*/
proto.message.Connect.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Connect} returns this
 */
proto.message.Connect.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Connect.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool active = 2;
 * @return {boolean}
 */
proto.message.Connect.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.message.Connect} returns this
 */
proto.message.Connect.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string room_name = 3;
 * @return {string}
 */
proto.message.Connect.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Connect} returns this
 */
proto.message.Connect.prototype.setRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.message.Connect.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Connect} returns this
 */
proto.message.Connect.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.Close.prototype.toObject = function(opt_includeInstance) {
  return proto.message.Close.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.Close} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Close.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.Close}
 */
proto.message.Close.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.Close;
  return proto.message.Close.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.Close} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.Close}
 */
proto.message.Close.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.Close.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.Close.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.Close} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Close.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.message.Message.oneofGroups_ = [[6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.message.Message.EventCase = {
  EVENT_NOT_SET: 0,
  ATTENDU_ENTRY: 6,
  ATT_PRODUCTION_ENTRY: 7,
  COMMANDE_ENTRY: 8,
  COM_ARTICLE_ENTRY: 9,
  REFERENCE_ENTRY: 10,
  STOCK_ENTRY: 11,
  UPDATE_ATTENDU_REQUEST: 12
};

/**
 * @return {proto.message.Message.EventCase}
 */
proto.message.Message.prototype.getEventCase = function() {
  return /** @type {proto.message.Message.EventCase} */(jspb.Message.computeOneofCase(this, proto.message.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.message.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    action: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    attenduEntry: (f = msg.getAttenduEntry()) && proto_attendu_attendu_pb.Attendu.toObject(includeInstance, f),
    attProductionEntry: (f = msg.getAttProductionEntry()) && proto_attendu_attendu_pb.AttProduction.toObject(includeInstance, f),
    commandeEntry: (f = msg.getCommandeEntry()) && proto_commande_commande_pb.Commande.toObject(includeInstance, f),
    comArticleEntry: (f = msg.getComArticleEntry()) && proto_comarticle_comarticle_pb.ComArticle.toObject(includeInstance, f),
    referenceEntry: (f = msg.getReferenceEntry()) && proto_reference_reference_pb.Reference.toObject(includeInstance, f),
    stockEntry: (f = msg.getStockEntry()) && proto_stock_stock_pb.Stock.toObject(includeInstance, f),
    updateAttenduRequest: (f = msg.getUpdateAttenduRequest()) && proto_attendu_attendu_pb.RealtimeAttendu.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.Message}
 */
proto.message.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.Message;
  return proto.message.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.Message}
 */
proto.message.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 6:
      var value = new proto_attendu_attendu_pb.Attendu;
      reader.readMessage(value,proto_attendu_attendu_pb.Attendu.deserializeBinaryFromReader);
      msg.setAttenduEntry(value);
      break;
    case 7:
      var value = new proto_attendu_attendu_pb.AttProduction;
      reader.readMessage(value,proto_attendu_attendu_pb.AttProduction.deserializeBinaryFromReader);
      msg.setAttProductionEntry(value);
      break;
    case 8:
      var value = new proto_commande_commande_pb.Commande;
      reader.readMessage(value,proto_commande_commande_pb.Commande.deserializeBinaryFromReader);
      msg.setCommandeEntry(value);
      break;
    case 9:
      var value = new proto_comarticle_comarticle_pb.ComArticle;
      reader.readMessage(value,proto_comarticle_comarticle_pb.ComArticle.deserializeBinaryFromReader);
      msg.setComArticleEntry(value);
      break;
    case 10:
      var value = new proto_reference_reference_pb.Reference;
      reader.readMessage(value,proto_reference_reference_pb.Reference.deserializeBinaryFromReader);
      msg.setReferenceEntry(value);
      break;
    case 11:
      var value = new proto_stock_stock_pb.Stock;
      reader.readMessage(value,proto_stock_stock_pb.Stock.deserializeBinaryFromReader);
      msg.setStockEntry(value);
      break;
    case 12:
      var value = new proto_attendu_attendu_pb.RealtimeAttendu;
      reader.readMessage(value,proto_attendu_attendu_pb.RealtimeAttendu.deserializeBinaryFromReader);
      msg.setUpdateAttenduRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAttenduEntry();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto_attendu_attendu_pb.Attendu.serializeBinaryToWriter
    );
  }
  f = message.getAttProductionEntry();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto_attendu_attendu_pb.AttProduction.serializeBinaryToWriter
    );
  }
  f = message.getCommandeEntry();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto_commande_commande_pb.Commande.serializeBinaryToWriter
    );
  }
  f = message.getComArticleEntry();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto_comarticle_comarticle_pb.ComArticle.serializeBinaryToWriter
    );
  }
  f = message.getReferenceEntry();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_reference_reference_pb.Reference.serializeBinaryToWriter
    );
  }
  f = message.getStockEntry();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto_stock_stock_pb.Stock.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAttenduRequest();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto_attendu_attendu_pb.RealtimeAttendu.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.message.Message.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timestamp = 2;
 * @return {string}
 */
proto.message.Message.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string room_name = 3;
 * @return {string}
 */
proto.message.Message.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.setRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string action = 4;
 * @return {string}
 */
proto.message.Message.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.message.Message.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional attendu.Attendu attendu_entry = 6;
 * @return {?proto.attendu.Attendu}
 */
proto.message.Message.prototype.getAttenduEntry = function() {
  return /** @type{?proto.attendu.Attendu} */ (
    jspb.Message.getWrapperField(this, proto_attendu_attendu_pb.Attendu, 6));
};


/**
 * @param {?proto.attendu.Attendu|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setAttenduEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearAttenduEntry = function() {
  return this.setAttenduEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasAttenduEntry = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional attendu.AttProduction att_production_entry = 7;
 * @return {?proto.attendu.AttProduction}
 */
proto.message.Message.prototype.getAttProductionEntry = function() {
  return /** @type{?proto.attendu.AttProduction} */ (
    jspb.Message.getWrapperField(this, proto_attendu_attendu_pb.AttProduction, 7));
};


/**
 * @param {?proto.attendu.AttProduction|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setAttProductionEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearAttProductionEntry = function() {
  return this.setAttProductionEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasAttProductionEntry = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional commande.Commande commande_entry = 8;
 * @return {?proto.commande.Commande}
 */
proto.message.Message.prototype.getCommandeEntry = function() {
  return /** @type{?proto.commande.Commande} */ (
    jspb.Message.getWrapperField(this, proto_commande_commande_pb.Commande, 8));
};


/**
 * @param {?proto.commande.Commande|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setCommandeEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearCommandeEntry = function() {
  return this.setCommandeEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasCommandeEntry = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional comarticle.ComArticle com_article_entry = 9;
 * @return {?proto.comarticle.ComArticle}
 */
proto.message.Message.prototype.getComArticleEntry = function() {
  return /** @type{?proto.comarticle.ComArticle} */ (
    jspb.Message.getWrapperField(this, proto_comarticle_comarticle_pb.ComArticle, 9));
};


/**
 * @param {?proto.comarticle.ComArticle|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setComArticleEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearComArticleEntry = function() {
  return this.setComArticleEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasComArticleEntry = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional reference.Reference reference_entry = 10;
 * @return {?proto.reference.Reference}
 */
proto.message.Message.prototype.getReferenceEntry = function() {
  return /** @type{?proto.reference.Reference} */ (
    jspb.Message.getWrapperField(this, proto_reference_reference_pb.Reference, 10));
};


/**
 * @param {?proto.reference.Reference|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setReferenceEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearReferenceEntry = function() {
  return this.setReferenceEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasReferenceEntry = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional stock.Stock stock_entry = 11;
 * @return {?proto.stock.Stock}
 */
proto.message.Message.prototype.getStockEntry = function() {
  return /** @type{?proto.stock.Stock} */ (
    jspb.Message.getWrapperField(this, proto_stock_stock_pb.Stock, 11));
};


/**
 * @param {?proto.stock.Stock|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setStockEntry = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearStockEntry = function() {
  return this.setStockEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasStockEntry = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional attendu.RealtimeAttendu update_attendu_request = 12;
 * @return {?proto.attendu.RealtimeAttendu}
 */
proto.message.Message.prototype.getUpdateAttenduRequest = function() {
  return /** @type{?proto.attendu.RealtimeAttendu} */ (
    jspb.Message.getWrapperField(this, proto_attendu_attendu_pb.RealtimeAttendu, 12));
};


/**
 * @param {?proto.attendu.RealtimeAttendu|undefined} value
 * @return {!proto.message.Message} returns this
*/
proto.message.Message.prototype.setUpdateAttenduRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.message.Message.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Message} returns this
 */
proto.message.Message.prototype.clearUpdateAttenduRequest = function() {
  return this.setUpdateAttenduRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Message.prototype.hasUpdateAttenduRequest = function() {
  return jspb.Message.getField(this, 12) != null;
};


goog.object.extend(exports, proto.message);
